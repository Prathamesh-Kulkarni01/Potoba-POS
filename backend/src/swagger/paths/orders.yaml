/orders/{restaurantId}:
  post:
    tags:
      - Orders
    summary: Create a new order
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: restaurantId
        required: true
        schema:
          type: string
        example: "507f1f77bcf86cd799439011"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - table
              - items
            properties:
              table:
                type: string
                example: "507f1f77bcf86cd799439013"
              items:
                type: array
                items:
                  type: object
                  required:
                    - menuItem
                    - quantity
                  properties:
                    menuItem:
                      type: string
                      example: "507f1f77bcf86cd799439012"
                    quantity:
                      type: integer
                      minimum: 1
                      example: 2
    responses:
      '201':
        description: Order created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'

/orders/{restaurantId}/orders:
  get:
    tags:
      - Orders
    summary: Get all orders
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: restaurantId
        required: true
        schema:
          type: string
        example: "507f1f77bcf86cd799439011"
      - in: query
        name: status
        schema:
          type: string
          enum: [pending, preparing, served]
      - in: query
        name: dateRange
        schema:
          type: string
        example: '{"start": "2024-01-01", "end": "2024-01-31"}'
    responses:
      '200':
        description: List of orders
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Order'

/orders/{restaurantId}/orders/{orderId}:
  get:
    tags:
      - Orders
    summary: Get order by ID
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: restaurantId
        required: true
        schema:
          type: string
        example: "507f1f77bcf86cd799439011"
      - in: path
        name: orderId
        required: true
        schema:
          type: string
        example: "507f1f77bcf86cd799439014"
    responses:
      '200':
        description: Order details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'

/orders/{restaurantId}/orders/{orderId}/status:
  patch:
    tags:
      - Orders
    summary: Update order status
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: restaurantId
        required: true
        schema:
          type: string
        example: "507f1f77bcf86cd799439011"
      - in: path
        name: orderId
        required: true
        schema:
          type: string
        example: "507f1f77bcf86cd799439014"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
                enum: [pending, preparing, served]
    responses:
      '200':
        description: Order status updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439014"
        table:
          type: string
          example: "507f1f77bcf86cd799439013"
        items:
          type: array
          items:
            type: object
            properties:
              menuItem:
                type: string
                example: "507f1f77bcf86cd799439012"
              quantity:
                type: integer
                example: 2
              price:
                type: number
                example: 12.99
        status:
          type: string
          enum: [pending, preparing, served]
          example: "pending"
        totalAmount:
          type: number
          example: 25.98
        restaurant:
          type: string
          example: "507f1f77bcf86cd799439011"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time